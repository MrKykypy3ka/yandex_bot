import keyboard as keyboard
from aiogram import types, Dispatcher
from create_bot import dp
from keyboards import key_board_main,\
    key_board_search,\
    key_board_spam,\
    key_board_choise,\
    inline_key_board_dragstore,\
    key_board_dragstore
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from parsers import collector


async def send_welcome(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç!\n–Ø –±–æ—Ç –§–∞—Ä–º–∞—Ü–µ–≤—Ç!\n–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞.", reply_markup=key_board_main)


class FSMDrag(StatesGroup):
    nameDrag_all = State()
    nameDrag_min = State()


class FSMMenu(StatesGroup):
    choise_menu = State()


@dp.message_handler(state=FSMDrag.nameDrag_all)
async def load_name_drag_all(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['name'] = message.text
    str = collector.print_price(data['name'])
    if len(str) > 4096:
        for x in range(0, len(str), 4096):
            await message.answer(str[x:x + 4096], reply_markup=key_board_search)
    else:
        await message.answer(str, reply_markup=key_board_search)
    await state.finish()
    await FSMMenu.choise_menu.set()
    async with state.proxy() as data:
        data['name'] = message.text
        data['type'] = 'all'


@dp.message_handler(state=FSMDrag.nameDrag_min)
async def load_name_drag_min(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['name'] = message.text
    await message.answer(collector.print_min_price(data['name']), reply_markup=key_board_search)
    await state.finish()
    await FSMMenu.choise_menu.set()
    async with state.proxy() as data:
        data['name'] = message.text
        data['type'] = 'min'


async def echo(message: types.Message, state: FSMContext):
    if message.text == '‚ùì –ò–Ω—Ñ–æ':
        await message.answer("1. –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:\n"
"   ‚Ä¢ –ü–æ–∏—Å–∫ –∞–Ω–∞–ª–æ–≥–æ–≤ –ª–µ–∫–∞—Ä—Å—Ç–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç —Å—Ç–æ—Ä–æ–Ω–Ω–∏–π —Ä–µ—Å—É—Ä—Å, –±–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤—Ä–∞—á–æ–º, –ø–µ—Ä–µ–¥ –ø–æ–∫—É–ø–∫–æ–π –∞–Ω–∞–ª–æ–≥–∞, –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–π—Ç–µ—Å—å —Å –≤—Ä–∞—á–æ–º;\n"
"   ‚Ä¢ –í —Ä–∞–∑–Ω—ã—Ö –∞–ø—Ç–µ–∫–∞—Ö —Å–µ—Ç–∏ ¬´–ú–∏–Ω–∏—Ü–µ–Ω¬ª –Ω–∞ –æ–¥–Ω–æ –∏ —Ç–æ–∂–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ —Ü–µ–Ω–∞ –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—Å—è;\n"
"   ‚Ä¢ –ü–æ–∏—Å–∫ –ª–µ–∫–∞—Ä—Å—Ç–≤ –≤ —Å–µ—Ç–∏ ¬´–ú–∏–Ω–∏—Ü–µ–Ω¬ª –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –ø–æ –∞–¥—Ä–µ—Å—É –ó–µ–π—Å–∫–∞—è, 182, –ø–æ—Å–∫–æ–ª—å–∫—É –¥–∞–Ω–Ω—ã–π —Ñ–∏–ª–∏–∞–ª —è–≤–ª—è–µ—Ç—Å—è —Å–∞–º—ã–º –∫—Ä—É–ø–Ω—ã–º –≤ –≥–æ—Ä–æ–¥–µ;\n"
"   ‚Ä¢ –¶–µ–Ω—ã –∞–∫—Ç—É–∞–ª—å–Ω—ã —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∑–∞–∫–∞–∑–µ –æ–Ω–ª–∞–π–Ω;\n"
"3. –ü—Ä–∞–≤–∏–ª–∞ –ø–æ–∏—Å–∫–∞:\n"
"   –®–∞–≥ 1: –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é –≤—ã–±—Ä–∞—Ç—å –ø—É–Ω–∫—Ç ¬´–ù–∞–π—Ç–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ¬ª\n"
"   –®–∞–≥ 2: –≤—ã–±—Ä–∞—Ç—å ¬´–í—Å–µ —Ü–µ–Ω—ã –ª–µ–∫–∞—Ä—Å—Ç–≤–∞¬ª –≤ —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–æ –≤–∞—à–µ–º—É –ø–æ–∏—Å–∫—É –∏–ª–∏ ¬´–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –≤–æ –≤—Å–µ—Ö –∞–ø—Ç–µ–∫–∞—Ö¬ª, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –∏—Å–∫–æ–º–æ–≥–æ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ (–ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä: —Ç–±–ª, –≤/–≤, 25–º–≥)\n"
"   –®–∞–≥ 3: –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —É—Å–ª–æ–≤–∏–π –ø–æ–∏—Å–∫–∞, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å –ø–æ–º–æ—â—å—é –æ—Ç–æ–±—Ä–∞–∑–∏–≤—à–∏–π—Å—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –Ω—É–∂–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã –∏—Å–∫–æ–º–æ–≥–æ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞.\n"
"–ü–æ–∏—Å–∫ –∑–∞–π–º—ë—Ç –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è, –ø–æ—Å–ª–µ —á–µ–≥–æ –±–æ—Ç –≤—ã–≤–µ–¥–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –∏ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π.\n"
"   –®–∞–≥ 4: –¥–µ–π—Å—Ç–≤–∏—è –ø–æ—Å–ª–µ –ø–æ–∏—Å–∫–∞:\n"
"      ‚Ä¢ –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞–ª–∏—á–∏–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –≤ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–π –∞–ø—Ç–µ–∫–µ, –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –ø—É–Ω–∫—Ç –º–µ–Ω—é ¬´–ù–∞–ª–∏—á–∏–µ –≤ –∞–ø—Ç–µ–∫–∞—Ö¬ª, –ø–æ—Å–ª–µ —á–µ–≥–æ –≤—ã–±—Ä–∞—Ç—å –Ω—É–∂–Ω—É—é –∞–ø—Ç–µ–∫—É (—Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω –≤ –∞–ø—Ç–µ–∫–∞—Ö).\n"
"      ‚Ä¢ –í —Ä–∞–∑–Ω—ã—Ö —Ñ–∏–ª–∏–∞–ª–∞—Ö —Å–µ—Ç–∏ –∞–ø—Ç–µ–∫ ¬´–º–∏–Ω–∏–µ—Ü–µ–Ω¬ª, —Ä–∞–∑–Ω—ã–µ —Ü–µ–Ω—ã –Ω–∞ –æ–¥–Ω–∏ –∏ —Ç–µ –∂–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞, –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Ü–µ–Ω—ã –≤–æ –≤—Å–µ—Ö —Ñ–∏–ª–∏–∞–ª–∞—Ö, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–í—Å–µ —Ü–µ–Ω—ã –≤ –º–∏–Ω–∏—Ü–µ–Ω¬ª\n"
"      ‚Ä¢ –ß—Ç–æ–±—ã –±–æ—Ç –ø–æ–¥–æ–±—Ä–∞–ª –≤–∞–º –∞–Ω–∞–ª–æ–≥–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –ø—É–Ω–∫—Ç–æ–º –º–µ–Ω—é ¬´–ê–Ω–∞–ª–æ–≥–∏¬ª\n"
"      ‚Ä¢  –î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –≤ –æ–¥–Ω—É –∏–∑ –∞–ø—Ç–µ–∫, –≤—ã–±–µ—Ä–∏—Ç–µ ¬´–ø–µ—Ä–µ–π—Ç–∏ –≤ –∞–ø—Ç–µ–∫—É¬ª, –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –∞–ø—Ç–µ–∫–∏.\n"
"      ‚Ä¢ –î–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–≤–æ–≥–æ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–ü–æ–∏—Å–∫ –Ω–æ–≤–æ–≥–æ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞¬ª, –¥–∞–ª–µ–µ —Å–º. –®–∞–≥ 2.\n"
"      ‚Ä¢ –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é ¬´–ù–∞ –≥–ª–∞–≤–Ω—É—é¬ª.")

    elif message.text == '‚öô –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–æ–π':
        await message.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏", reply_markup=key_board_spam)
    elif message.text == 'üíæ –ü–æ–ª—É—á–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è':
        await message.answer("–í—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω—ã!", reply_markup=key_board_main)
    elif message.text == 'üîé –ù–∞–π—Ç–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ' or message.text == 'üîé –ü–æ–∏—Å–∫ –Ω–æ–≤–æ–≥–æ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞':
        await message.answer('–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?', reply_markup=key_board_choise)
        await state.finish()
    elif message.text == 'üìà –í—Å–µ —Ü–µ–Ω—ã –ª–µ–∫–∞—Ä—Å—Ç–≤–∞':
        await FSMDrag.nameDrag_all.set()
        await message.answer('–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞, –∫–æ—Ç–æ—Ä–æ–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–π—Ç–∏')
    elif message.text == 'üìâ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –≤–æ –≤—Å–µ—Ö –∞–ø—Ç–µ–∫–∞—Ö':
        await FSMDrag.nameDrag_min.set()
        await message.answer('–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞, –∫–æ—Ç–æ—Ä–æ–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–π—Ç–∏')
    elif message.text == 'üìÉ –ù–∞ –≥–ª–∞–≤–Ω—É—é':
        current_state = await state.get_state()
        if current_state is None:
            await message.answer('–ì–ª–∞–≤–Ω–∞—è', reply_markup=key_board_main)
            return
        await state.finish()
        await message.answer('–ì–ª–∞–≤–Ω–∞—è', reply_markup=key_board_main)
    elif message.text == '‚úÖ –í–∫–ª—é—á–∏—Ç—å':
        await message.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏", reply_markup=key_board_spam)
    elif message.text == '‚ùå –í—ã–∫–ª—é—á–∏—Ç—å':
        await message.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏", reply_markup=key_board_spam)
    elif message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥':
        await message.answer('–ú–µ–Ω—é', reply_markup=key_board_search)
    else:
        await message.answer("–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é")


async def echo_menu(message: types.Message, state: FSMContext):
    if message.text == 'üîé –ù–∞–π—Ç–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ' or message.text == 'üîé –ü–æ–∏—Å–∫ –Ω–æ–≤–æ–≥–æ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞':
        await message.answer('–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?', reply_markup=key_board_choise)
        await state.finish()

    elif message.text == 'üö∂‚Äç‚ôÇ –ü–µ—Ä–µ–π—Ç–∏ –≤ –∞–ø—Ç–µ–∫—É':
        await message.answer("–°—Å—ã–ª–∫–∏ –Ω–∞ –∞–ø—Ç–µ–∫–∏", reply_markup=inline_key_board_dragstore)

    elif message.text == '‚ùî –ù–∞–ª–∏—á–∏–µ –≤ –∞–ø—Ç–µ–∫–∞—Ö':
        async with state.proxy() as data:
            if data['type'] == 'min':
                await message.answer('–ö–∞–∫–∞—è –∞–ø—Ç–µ–∫–∞ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç', reply_markup=key_board_dragstore)
            else:
                await message.answer('–ù–∞–ª–∏—á–∏–µ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω.',
                                     reply_markup=key_board_search)

    elif message.text == 'üîÉ –ê–Ω–∞–ª–æ–≥–∏':
        async with state.proxy() as data:
            await message.answer(collector.print_analog(data['name']), reply_markup=key_board_search)

    elif message.text == 'üíµ –í—Å–µ —Ü–µ–Ω—ã –≤ –º–∏–Ω–∏—Ü–µ–Ω':
        async with state.proxy() as data:
            await message.answer(collector.print_minicen(data['name'], data['type']), reply_markup=key_board_search)

    elif message.text == 'üìÉ –ù–∞ –≥–ª–∞–≤–Ω—É—é':
        current_state = await state.get_state()
        if current_state is None:
            await message.answer('–ì–ª–∞–≤–Ω–∞—è', reply_markup=key_board_main)
            return
        await state.finish()
        await message.answer('–ì–ª–∞–≤–Ω–∞—è', reply_markup=key_board_main)

    elif message.text == 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥':
        await message.answer('–ú–µ–Ω—é', reply_markup=key_board_search)

    elif message.text == '–¢–≤–æ—è –∞–ø—Ç–µ–∫–∞':
        async with state.proxy() as data:
            await message.answer(collector.print_availability(data['name'], '–¢–≤–æ—è –∞–ø—Ç–µ–∫–∞'),
                                 reply_markup=key_board_search)

    elif message.text == '–ú–∏–Ω–∏—Ü–µ–Ω':
        async with state.proxy() as data:
            await message.answer(collector.print_availability(data['name'], '–ú–∏–Ω–∏—Ü–µ–Ω'),
                                 reply_markup=key_board_search)

    elif message.text == '–ê–ø—Ç–µ–∫–∞–†—É':
        await message.answer("üè•–ê–ø—Ç–µ–∫–∞.–†–£üè•"
                             "\n–í –¥–∞–Ω–Ω–æ–π –∞–ø—Ç–µ–∫–∏ –º–æ–∂–Ω–æ –æ—Ñ–æ—Ä–º–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ–¥ –∑–∞–∫–∞–∑."
                             "\n–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ 6 - 10 –¥–Ω–µ–π.", reply_markup=key_board_search)

    elif message.text == '–ú–æ–Ω–∞—Å—Ç—ã—Ä—ë–≤':
        async with state.proxy() as data:
            await message.answer(collector.print_availability(data['name'], '–ú–æ–Ω–∞—Å—Ç—ã—Ä—ë–≤'),
                                 reply_markup=key_board_search)

    elif message.text == '–ê–º—É—Ä –§–∞—Ä–º–∞—Ü–∏—è':
        async with state.proxy() as data:
            await message.answer(collector.print_availability(data['name'], '–ê–º—É—Ä –§–∞—Ä–º–∞—Ü–∏—è'),
                                 reply_markup=key_board_search)
    else:
        await message.answer("–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é")


def register_handlers_client(dp: Dispatcher):
    dp.register_message_handler(send_welcome, commands=['—Å—Ç–∞—Ä—Ç', 'start'])
    dp.register_message_handler(echo, state=None)
    dp.register_message_handler(echo_menu, state=FSMMenu.choise_menu)


# medicines = ['–∫–∞–≥–æ—Ü–µ–ª', '–Ω–æ—à–ø–∞', '—Å–Ω—É–ø', '—Ä–æ–º–∞—à–∫–∞', '–¥–µ—Ç—Ä–∞–ª–µ–∫—Å', '–∞—Å–ø–∏—Ä–∏–Ω',
#              '–ø–∞—Ä–∞—Ü–µ—Ç–∞–º–æ–ª', '—Ç–∏–∑–∏–Ω', '–æ—Ç—Ä–∏–≤–∏–Ω', '–∞—Ü—Ü', '–∞–Ω–≤–∏–º–∞–∫—Å', '–¥–∏–∞–∑–∞–ª–∏–Ω',
#              '–∫–∞–≥–æ—Ü–µ–ª', '–∫–∞–≥–æ—Ü–µ–ª', '–∫–∞–≥–æ—Ü–µ–ª', '–ë–ì–ü–£', '.', ' ']
# number_test = 0
#
#
# def test():
#     global number_test #–∑–Ω–∞—é —á—Ç–æ —Ç–∞–∫ –Ω–µ—Ö–æ—Ä–æ—à–æ –¥–µ–ª–∞—Ç—å
#     for elem in medicines:
#         number_test += 1
#         dp.send_message(elem)
#
#
# @dp.message_handler(content_types=["text"])
# def repeat_all_messages(message):
#     if medicines[number_test] in message:
#         dp.send_message('–ë–æ—Ç –Ω–∞—à—ë–ª —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è')
#     else:
#         dp.send_message('–°–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ—Ç')